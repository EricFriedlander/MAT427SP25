{
  "hash": "da1e5ae87081cabfa2c9d8e4b5b2ca25",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Homework 1: Exploratory Data Analysis\"\nauthor: \"My name\"\neditor: visual\nformat:\n  html:\n    embed-resources: true\n---\n\n\n\n\n\nAdapted from \"Start teaching with R,\" created by R Pruim, N J Horton, and D Kaplan, 2013, \"Interactive and Dynamic Graphics for Data Analysis,\" by Dianne Cook and Deborah F. Swayne, Colby Long's DATA 325 Course at Wooster College and Maria Tackett's STA-210 course at Duke University.\n\n## Introduction\n\nIn this homework we will familiarize ourselves with the tools that we'll use throughout the course and refresh ourselves on topic related to exploratory data analysis.\n\n## Course Toolkit\n\nThe primary tools we'll be using in this course are R, RStudio, git, and GitHub. We will be using them throughout the course both to learn the concepts discussed in the course and to analyze real data and come to informed conclusions.\n\n::: callout-note\nR is the name of the programming language itself and RStudio is a convenient interface.\n:::\n\n::: callout-note\nGit is a version control system (like \"Track Changes\" features from Microsoft Word but more powerful) and GitHub is the home for your Git-based projects on the internet (like Dropbox but much better for code).\n:::\n\nTo make versioning simpler, this homework will be completed individually. In the future, you'll learn about collaborating on GitHub and producing a single homework for your team, but for now, concentrate on getting the basics down.\n\n## Exploratory Data Analysis\n\nOne of the most important components of data science is exploratory data analysis. I really like the following definition, which comes from [this article](https://towardsdatascience.com/exploratory-data-analysis-8fc1cb20fd15) (though it's probably not the original source).\n\n> Exploratory Data Analysis refers to the critical process of performing initial investigations on data so as to discover patterns, spot anomalies, to test hypotheses and to check assumptions with the help of summary statistics and graphical representations.\n\nBefore you begin your exploratory analysis, you may already have a particular question in mind. For example, you might work for an online retailer and want to develop a model to predict which purchased items will be returned. Or, you may not have a particular question in mind. Instead, you might just be asked to look at browsing data for several customers and figure out some way to increase purchases. In either case, before you construct a fancy model, you need to explore and understand your data. This is how you gain new insights and determine if an idea is worth pursuing.\n\n## Learning goals\n\nBy the end of the homework, you will...\n\n-   Be familiar with the workflow using RStudio and GitHub\n-   Gain practice writing a reproducible report using Quarto\n-   Practice version control using GitHub\n-   Be able to create numerical and visual summaries of data\n-   Use those summaries\n\n# Getting Started\n\n### Accessing R and RStudio\n\n-   Follow the directions [here](https://posit.co/download/rstudio-desktop/) to install R and RStudio on your computer\n\n-   If, for some reason, you are unable to use R or RStudio on your personal computer, you may use the [College of Idaho's RStudio Server](https://rstudio.collegeofidaho.edu/). However, I do not recommend you do this as I want you to practice installing packages in this course and you do not have the permissions to do that on the server. If you must use the RStudio Server, please notify Dr. Friedlander *immediately*.\n\n### Set up your SSH Key\n\nYou will authenticate GitHub using SSH. Below are an outline of the authentication steps.\n\n::: callout-note\nYou only need to do this authentication process one time on a single system.\n:::\n\n-   **Step 0**: Type `install.packages(\"credentials\")` into your console.\n-   **Step 1**: Type `credentials::ssh_setup_github()` into your console.\n-   **Step 2**: R will ask \"No SSH key found. Generate one now?\" Click 1 for yes.\n-   **Step 3**: You will generate a key. It will begin with \"ssh-rsa....\" R will then ask \"Would you like to open a browser now?\" Click 1 for yes.\n-   **Step 4**: You may be asked to provide your username and password to log into GitHub. This would be the ones associated with your account that you set up. After entering this information, paste the key in and give it a name. You might name it in a way that indicates where the key will be used, e.g., `mat427`)\n\nYou can find more detailed instructions [here](https://github.com/DukeStatSci/github_auth_guide) if you're interested.\n\n### Configure git\n\nThere is one more thing we need to do before getting started on the assignment. Specifically, we need to configure your git so that RStudio can communicate with GitHub. This requires two pieces of information: your name and email address.\n\nTo do so, you will use the `use_git_config()` function from the `usethis` package. You will need to install the `usethis` package in the same way you installed the `credentials` packages above.\n\nType the following lines of code in the **console** in RStudio filling in your name and the email address associated with your GitHub account.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_git_config(\n  user.name = \"Your name\", \n  user.email = \"Email associated with your GitHub account\")\n```\n:::\n\n\n\nFor example, mine would be\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_git_config(\n  user.name = \"EricFriedlander\",\n  user.email = \"efriedlander@collegeofidaho.edu\")\n```\n:::\n\n\n\nYou are now ready interact between GitHub and RStudio!\n\n## Clone the repo & start new RStudio project\n\n-   Go to the course organization at [github.com/mat427sp25](https://github.com/mat427sp25) organization on GitHub. Click on the repo with the prefix **hw-01-**. It contains the starter documents you need to complete the lab.\n    -   If you do not see your hw-01 repo, [click here](https://classroom.github.com/a/vKdMyAYm) to create your repo.\n-   Click on the green **CODE** button, select **Use SSH** (this might already be selected by default, and if it is, you'll see the text **Clone with SSH**). Click on the clipboard icon to copy the repo URL.\n-   In RStudio, go to *File* $\\rightarrow$ *New Project* $\\rightarrow$ *Version Control* $\\rightarrow$ *Git*.\n-   Copy and paste the URL of your assignment repo into the dialog box *Repository URL*. Again, please make sure to have *SSH* highlighted under *Clone* when you copy the address.\n-   Click *Create Project*, and the files from your GitHub repo will be displayed in the *Files* pane in RStudio.\n-   Click *01-hw-eda.qmd* to open the template Quarto file. This is where you will write up your code and narrative for the lab.\n\n## R and R Studio\n\nBelow are the components of the RStudio IDE.\n\n![](images/rstudio-panes.png)\n\nBelow are the components of a Quarto (.qmd) file.\n\n![](images/quarto.png){fig-align=\"center\"}\n\n### YAML\n\nThe top portion of your Quarto file (between the three dashed lines) is called **YAML**. It is rumored that it stood for \"Yet Another Markup Language\" but it officially stands for \"YAML Ain't Markup Language\". It is a human friendly data serialization standard for all programming languages. All you need to know is that this area is called the YAML (we will refer to it as such) and that it contains meta information about your document.\n\n::: callout-important\nOpen the Quarto (.qmd) file in your project, change the author name to your name, and render the document. Examine the rendered document.\n:::\n\n### Committing changes\n\nNow, go to the Git pane in your RStudio instance. This will be in the top right hand corner in a separate tab.\n\nIf you have made changes to your Quarto (.qmd) file, you should see it listed here. Click on it to select it in this list and then click on **Diff**. This shows you the *diff*erence between the last committed state of the document and its current state including changes. You should see deletions in red and additions in green.\n\nIf you're happy with these changes, we'll prepare the changes to be pushed to your remote repository. First, **stage** your changes by checking the appropriate box on the files you want to prepare. Next, write a meaningful commit message (for instance, \"updated author name\") in the **Commit message** box. Finally, click **Commit**. Note that every commit needs to have a commit message associated with it.\n\nYou don't have to commit after every change, as this would get quite tedious. You should commit states that are *meaningful to you* for inspection, comparison, or restoration.\n\nIn the first few assignments I will nudge you when to commit and in some cases, what commit message to use. As the semester progresses we will let you make these decisions.\n\nNow let's make sure all the changes went to GitHub. Go to your GitHub repo and refresh the page. You should see your commit message next to the updated files. If you see this, all your changes are on GitHub and you're good to go!\n\n### Push changes\n\nNow that you have made an update and committed this change, it's time to push these changes to your repo on GitHub.\n\nIn order to push your changes to GitHub, you must have **staged** your **commit** to be pushed. click on **Push**.\n\n## Understanding your data\n\nToday we will be working with the `TIPS` data set which is in the `regclass` package. The data in the `TIPS` dataset is information recorded by one waiter about each tip he received over a period of a few months working in a restaurant. We would like to use this data to address the question, *\"What factors affect tipping behavior?\"*\n\n### Exercise 1\n\n::: {.callout-tip title=\"Question\"}\nInstall the `regclass` package by either typing `install.packages(\"regclass\")` in the console or by clicking \"Tools \\> Install Packages\" and selecting the package. Once you have done this, the code chunk below will load the package and data set. Notice that a bunch of unnecessary output is included when you knit the document. Change the [Quarto chunk options](https://quarto.org/docs/computations/execution-options.html) so that this is not displayed.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(regclass)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: bestglm\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: leaps\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: VGAM\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: stats4\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: splines\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: rpart\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: randomForest\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nrandomForest 4.7-1.1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nType rfNews() to see new features/changes/bug fixes.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'randomForest'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:dplyr':\n\n    combine\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:ggplot2':\n\n    margin\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nImportant regclass change from 1.3:\nAll functions that had a . in the name now have an _\nall.correlations -> all_correlations, cor.demo -> cor_demo, etc.\n```\n\n\n:::\n\n```{.r .cell-code}\ndata(\"TIPS\")\n```\n:::\n\n\n\nWhen exploring a new data set, it's important to first understand the basics. What format is our data in? What types of information are included in the data set? How many observations are there?\n\n### Exercise 2\n\n::: {.callout-tip title=\"Question\"}\nIn R, data sets are usually stored in a 2-dimensional structure called a *data frame*. The `tidyverse` provides a lot of useful functions for a variety of applications including data exploration and the particular flavor of data frame that the tidyverse uses is called a `tibble`. After loading the `tidyverse` library, you can get an idea of the structure of a data set using the syntax `str(dataset)` or `glimpse(data)`, and you can peak at the first few rows and columns with `head(dataset)`. Create a code chunk below, and use these functions (and others) in the R chunk below to better understand the data. How many tips are recorded in this data set? Which days of the week did the waiter work?\n:::\n\nOften, a data set will come with a *code book* which gives more complete information about the structure of the data, the meaning of variables, and how the data were collected. In this case, most of the column names are pretty self explanatory.\n\n| Variable        | Description                               |\n|-----------------|-------------------------------------------|\n| `TipPercentage` | the gratuity, as a percentage of the bill |\n| `Bill`          | the cost of the meal in US dollars        |\n| `Tip`           | the tip in US dollars                     |\n| `Gender`        | gender of the bill payer                  |\n| `Smoker`        | whether the party included smokers        |\n| `Weekday`       | day of the week                           |\n| `Time`          | time the bill was paid                    |\n| `PartySize`     | size of the party                         |\n\n### Exercise 3\n\n::: {.callout-tip title=\"Question\"}\nEven though the column names are self-explanatory, we might have more questions about the data. For example, we might conjecture that people tip differently for breakfast and lunch, but our data only tells us if the bill was paid at \"Day\" or \"Night.\" State another reasonable conjecture about a factor that might affect tipping behavior. What additional information would be helpful to explore that conjecture?\n:::\n\n::: {.callout-warning title=\"Render-Commit-Push\"}\nThis is a good place to render, commit, and push changes to your hw-eda repo on GitHub. Write an informative commit message (e.g. \"Completed exercises 1 - 3\"), and push every file to GitHub by clicking the checkbox next to each file in the Git pane. After you push the changes, the Git pane in RStudio should be empty.\n:::\n\n# Numerical Summaries\n\nNow we'd like to start looking closely at the data set to develop some ideas about what factors might affect tipping. The basic descriptive statistics have obvious names, like `mean, median, sd, IQR, quantile`, etc. When using the `tidyverse` you use these in conjunction with the function `summarize`. Other options for data exploration include the function `summary()`, which computes several numerical summaries all at once, and the `skimr` package which includes many useful functions for taking a quick look at your data. We can apply these functions to an entire data frame or a specific column of the data fame.\n\n### Exercise 4\n\n::: {.callout-tip title=\"Question\"}\nUse some of these summaries to answer the following. How many smokers are in the data set? How fancy do you think restaurant is? Is it possible to tell from this summary how many different shifts the waiter worked? Why or why not?\n:::\n\nAs we start to explore different questions, we might want to know things about interactions between variables. Like, are tips larger during the day or at night? Or does gender or smoking status matter for how much people spend and how much they tip? You can calculate statistics within groups by including grouping variables and using `group_by` or `aggregate` like this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Tidyverse\nTIPS |> \n  group_by(Time) |> \n  summarize(median(Tip))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  Time  `median(Tip)`\n  <fct>         <dbl>\n1 Day            2.25\n2 Night          3   \n```\n\n\n:::\n\n```{.r .cell-code}\nTIPS |> \n  group_by(Gender, Smoker) |> \n  summarize(avg_bill = mean(Bill), avg_TipPerc = mean(TipPercentage))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'Gender'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 4\n# Groups:   Gender [2]\n  Gender Smoker avg_bill avg_TipPerc\n  <fct>  <fct>     <dbl>       <dbl>\n1 Female No         18.1        15.7\n2 Female Yes        18.0        18.2\n3 Male   No         19.8        16.1\n4 Male   Yes        22.3        15.3\n```\n\n\n:::\n\n```{.r .cell-code}\n# Using aggregate\naggregate(Tip ~ Time, data = TIPS, FUN = median)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Time  Tip\n1   Day 2.25\n2 Night 3.00\n```\n\n\n:::\n\n```{.r .cell-code}\naggregate(cbind(Bill, TipPercentage) ~ Gender + Smoker, data = TIPS, FUN = mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Gender Smoker     Bill TipPercentage\n1 Female     No 18.10519      15.69296\n2   Male     No 19.79124      16.06701\n3 Female    Yes 17.97788      18.21606\n4   Male    Yes 22.28450      15.27967\n```\n\n\n:::\n:::\n\n\n\nWe can also use the `kable` function from the `knitr` package to make our tables look pretty:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(knitr)\n\nTIPS |> \n  group_by(Time) |> \n  summarize(median(Tip)) |> \n  kable()\n```\n\n::: {.cell-output-display}\n\n\n|Time  | median(Tip)|\n|:-----|-----------:|\n|Day   |        2.25|\n|Night |        3.00|\n\n\n:::\n:::\n\n\n\nThe `~` (tilde) symbol appears in a lot of functions. In R, a **formula** is an expression involving `~` that provides slots for laying out how you want to relate variables: `y ~ x` means \"$y$ versus $x$\", \"$y$ depends on $x$\", or \"break down $y$ by $x$\". In the first case above, you're saying \"break Tip down by Time\" or \"perform this function on the Tip, conditioned on Time.\"\n\n### Exercise 5\n\n::: {.callout-tip title=\"Question\"}\nCalculate the variance of the tip percentage broken down by day of the week. Do you notice anything unusual? Explore the data and determine a possible cause for this.\n:::\n\nFor categorical variables, we can create tables as follows:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using table\ntable(TIPS$Smoker, TIPS$Gender) |> \n  kable()\n```\n\n::: {.cell-output-display}\n\n\n|    | Female| Male|\n|:---|------:|----:|\n|No  |     54|   97|\n|Yes |     33|   60|\n\n\n:::\n\n```{.r .cell-code}\n# Using xtabs\nxtabs(~ Smoker + Gender, data = TIPS) |> \n  kable()\n```\n\n::: {.cell-output-display}\n\n\n|    | Female| Male|\n|:---|------:|----:|\n|No  |     54|   97|\n|Yes |     33|   60|\n\n\n:::\n\n```{.r .cell-code}\n# Using the janitor package (my favorite)\nlibrary(janitor)\nTIPS |> \n  tabyl(Smoker, Gender) |>  # creates table\n  adorn_totals(where = c(\"row\", \"col\")) |>  # add margin totals if you want\n  kable()\n```\n\n::: {.cell-output-display}\n\n\n|Smoker | Female| Male| Total|\n|:------|------:|----:|-----:|\n|No     |     54|   97|   151|\n|Yes    |     33|   60|    93|\n|Total  |     87|  157|   244|\n\n\n:::\n:::\n\n\n\n### Exercise 6\n\n::: {.callout-tip title=\"Question\"}\nWhich day of the week has the highest *percentage* of tables that are smokers? Hint: look at documentation and use Google to figure out how to create table proportions.\n:::\n\n::: {.callout-warning title=\"Render-Commit-Push\"}\nThis is a good place to render, commit, and push changes to your hw-eda repo on GitHub. Write an informative commit message (e.g. \"Completed exercises 4 - 6\"), and push every file to GitHub by clicking the checkbox next to each file in the Git pane. After you push the changes, the Git pane in RStudio should be empty.\n:::\n\n## Graphical Summaries\n\nGraphical summaries are a key tool in exploratory data analysis to to help you understand your data. They also help you communicate insights about your data to others. For example, we might want to display relationships about some of our categorical variables. So we could start by graphing different party sizes in our data set.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nTIPS |> \n  ggplot(aes(x = PartySize)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](01-hw-eda_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\nOr we could explore the question about the percentage of tables that are smokers on different days of the week visually.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nTIPS |> \n  ggplot(aes(x = Weekday, fill = Smoker)) +\n    geom_bar()\n```\n\n::: {.cell-output-display}\n![](01-hw-eda_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\nTIPS |> \n  ggplot(aes(x = Weekday, fill = Smoker)) +\n    geom_bar(position = \"fill\")\n```\n\n::: {.cell-output-display}\n![](01-hw-eda_files/figure-html/unnamed-chunk-8-2.png){fig-align='center' width=672}\n:::\n:::\n\n\n\nWe might summarize a numerical variable with a histogram. For example, here is a histogram of all of the tips in the data set.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nTIPS |> \n  ggplot(aes(x = Tip)) +\n    geom_histogram(bins = 100)\n```\n\n::: {.cell-output-display}\n![](01-hw-eda_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\n### Exercise 7\n\n::: {.callout-tip title=\"Question\"}\nNotice that there are a few \"spikes\" in the histogram above. What do you think is causing this?\n:::\n\nWe can also summarize this numerical data broken down by one of the categorical variables using boxplots, violin plots, or sina plots. Note that to create sina plots we need the `ggforce` package.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nTIPS |> \n  ggplot(aes(x=Weekday, y=Tip)) +\n  geom_boxplot() +\n  labs(title = \"Tips by Day of the Week\", \n       x = \"Day of the Week\",\n       y = \"Tips\")\n```\n\n::: {.cell-output-display}\n![](01-hw-eda_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\nTIPS |> \n  ggplot(aes(x=Weekday, y=Tip)) +\n  geom_boxplot() +\n  geom_jitter() +\n  labs(title = \"Tips by Day of the Week\", \n       x = \"Day of the Week\",\n       y = \"Tips\")\n```\n\n::: {.cell-output-display}\n![](01-hw-eda_files/figure-html/unnamed-chunk-10-2.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\nTIPS |> \n  ggplot(aes(x=Weekday, y=Tip)) +\n  geom_violin() +\n  labs(title = \"Tips by Day of the Week\", \n       x = \"Day of the Week\",\n       y = \"Tips\")\n```\n\n::: {.cell-output-display}\n![](01-hw-eda_files/figure-html/unnamed-chunk-10-3.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\nlibrary(ggforce)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'ggforce' was built under R version 4.4.2\n```\n\n\n:::\n\n```{.r .cell-code}\nTIPS |> \n  ggplot(aes(x=Weekday, y=Tip)) +\n  geom_sina() +\n  labs(title = \"Tips by Day of the Week\", \n       x = \"Day of the Week\",\n       y = \"Tips\")\n```\n\n::: {.cell-output-display}\n![](01-hw-eda_files/figure-html/unnamed-chunk-10-4.png){fig-align='center' width=672}\n:::\n:::\n\n\n\nOr we can visualize the relationship between a lot of our numerical variables at once.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Using pairs (only numerical allowed)\npairs(~ Bill + TipPercentage + Tip\n    , data = TIPS\n    , main=\"Scatterplot Matrix for TIPS\")\n```\n\n::: {.cell-output-display}\n![](01-hw-eda_files/figure-html/unnamed-chunk-11-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n# Using ggpairs from GGally package (preferable even though more syntax)\nlibrary(GGally)\nTIPS |> \n  select(Bill, TipPercentage, Tip, Weekday) |> \n  ggpairs()\n```\n\n::: {.cell-output-display}\n![](01-hw-eda_files/figure-html/unnamed-chunk-11-2.png){fig-align='center' width=672}\n:::\n:::\n\n\n\n### Exercise 8\n\n::: {.callout-tip title=\"Question\"}\nAre there any clear linear relationships in the scatterplots above? What do you think is the explanation for these relationships?\n:::\n\nThere are lots of other interesting graphical summaries available for interpreting and displaying data. In addition, there are lots of R packages that allow you to draw these graphics and to further customize some of the ones we discussed here. In your projects, you are welcome to use any of these that you think are appropriate.\n\n::: {.callout-warning title=\"Render-Commit-Push\"}\nThis is a good place to render, commit, and push changes to your hw-eda repo on GitHub. Write an informative commit message (e.g. \"Completed exercises 7 - 8\"), and push every file to GitHub by clicking the checkbox next to each file in the Git pane. After you push the changes, the Git pane in RStudio should be empty.\n:::\n\n### Exercise 9\n\n::: {.callout-tip title=\"Question\"}\nState a reasonable conjecture about tipping behavior that you would like to explore in the data set. For example, you might think that people on dates tip more or that the waiter gets smaller tips when he has too many tables. Give *at least* one numerical and one graphical summary to explore this conjecture. Is there any evidence to support your conjecture?\n\nIt's okay if your conjecture is not supported or if you are just wrong--that's often the case in exploratory data analysis.\n:::\n\n::: {.callout-warning title=\"Render-Commit-Push\"}\nThis is a good place to render, commit, and push changes to your hw-eda repo on GitHub. Write an informative commit message (e.g. \"Completed exercises 9\"), and push every file to GitHub by clicking the checkbox next to each file in the Git pane. After you push the changes, the Git pane in RStudio should be empty.\n:::\n\n::: callout-caution\nBefore you're done with you work, make sure you look it over one last time to make sure the rendered document looks like you want it to! I can't tell you how often students turn in work and their output doesn't match their prose or the output definitely doesn't look the way they wanted it to.\n:::\n",
    "supporting": [
      "01-hw-eda_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}