{
  "hash": "3d5614ccf78080db32889205793dac45",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'MATH 427: Classification + Logistic Regression'\nauthor: Eric Friedlander\nfooter: \"[ðŸ”— MAT 427 - Spring 2025 -  Schedule](https://mat427sp25.netlify.app/schedule)\"\nlogo: \"../images/logo.png\"\nformat: \n  revealjs:\n    theme: slides.scss\n    multiplex: false\n    transition: fade\n    slide-number: false\n    incremental: false \n    chalkboard: true\nexecute:\n  freeze: auto\n  echo: true\nknitr:\n  opts_chunk: \n    R.options:      \n    width: 200\n---\n\n\n\n\n\n## Classification Problems {.smaller}\n\n-   Response $Y$ is qualitative (categorical).\n    -   Only two classes $\\implies$ **Binary Classification Problem**\n-   **Objectives**: build a classifier $\\hat{Y}=\\hat{C}(\\mathbf{X})$\n    that:\n    -   assigns a class label to a future unlabeled (unseen) observation\n    -   helps understand the relationship between the predictors and\n        response\n-   There can be two types of predictions based on the research problem.\n    -   Class probabilities\n    -   Class labels\n\n## Default Dataset {.smaller}\n\n::: columns\n::: column\nA simulated data set containing information on ten thousand customers. The aim here is to predict which customers will default on their credit card debt.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(Default) |> kable()  # print first six observations\n```\n\n::: {.cell-output-display}\n\n\n|default |student |   balance|    income|\n|:-------|:-------|---------:|---------:|\n|No      |No      |  729.5265| 44361.625|\n|No      |Yes     |  817.1804| 12106.135|\n|No      |No      | 1073.5492| 31767.139|\n|No      |No      |  529.2506| 35704.494|\n|No      |No      |  785.6559| 38463.496|\n|No      |Yes     |  919.5885|  7491.559|\n\n\n:::\n:::\n\n\n:::\n\n::: column\n**Response Variable**: `default`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDefault |> \n  tabyl(default) |>  # class frequencies\n  kable()           # Make it look nice\n```\n\n::: {.cell-output-display}\n\n\n|default |    n| percent|\n|:-------|----:|-------:|\n|No      | 9667|  0.9667|\n|Yes     |  333|  0.0333|\n\n\n:::\n:::\n\n\n:::\n:::\n\n## K-Nearest Neighbors Classifier\n\n-   Given a value for $K$ and a test data point $x_0$:\n    $$P(Y=j | X=x_0)=\\dfrac{1}{K} \\sum_{x_i \\in \\mathcal{N}_0} I(y_i = j)$$\n    where $\\mathcal{N}_0$ is the set of the $K$ \"closest\" neighbors.\n-   For classification: neighbors \"vote\" for class (unlike in regression\n    where predictions are obtained by averaging)\n    $$P(Y=j | X=x_0)=\\text{Proportion of neighbors in class }j$$\n\n## [K-Nearest Neighbors Classifier: Build Model]{.r-fit-text}\n\n-   **Response** ($Y$): `default`\n-   **Predictor** ($X$): `balance`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknnfit <- nearest_neighbor(neighbors = 10) |> \n  set_engine(\"kknn\") |> \n  set_mode(\"classification\") |>  \n  fit(default ~ balance, data = Default)   # fit 10-nn model\n```\n:::\n\n\n\n## [K-Nearest Neighbors Classifier: Predictions]{.r-fit-text} {.smaller}\n\n::: panel-tabset\n## Probabilities\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict(knnfit, new_data = Default, type = \"prob\") |>    # obtain predictions as probabilities\n  head() |> # predicted probabilities for first six observations\n  kable()\n```\n\n::: {.cell-output-display}\n\n\n| .pred_No| .pred_Yes|\n|--------:|---------:|\n|        1|         0|\n|        1|         0|\n|        1|         0|\n|        1|         0|\n|        1|         0|\n|        1|         0|\n\n\n:::\n:::\n\n\n\n## Class labels\n\n-   Predicts class w/ maximum probability\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict(knnfit, new_data = Default, type = \"class\") |>    # obtain predictions as probabilities\n  head() |> # predicted probabilities for first six observations\n  kable()\n```\n\n::: {.cell-output-display}\n\n\n|.pred_class |\n|:-----------|\n|No          |\n|No          |\n|No          |\n|No          |\n|No          |\n|No          |\n\n\n:::\n:::\n\n\n\n\n:::\n\n\n\n<!-- ## Why Not Linear Regression? {.smaller} -->\n\n<!-- ```{r} -->\n<!-- lrfit <- lm(default_id ~ balance, data = Default)   # fit SLR -->\n<!-- summary(lrfit$fitted.values)  # summary of y_hats -->\n<!-- ``` -->\n\n<!-- ```{r} -->\n<!-- #| echo: FALSE -->\n<!-- #| fig.align: \"center\" -->\n\n<!-- ggplot(data = Default, aes(x = balance, y = default_id)) + -->\n<!--   geom_point() + -->\n<!--   geom_smooth(method = \"lm\", se = FALSE) + -->\n<!--   scale_y_continuous(breaks = c(0, 0.5, 1)) -->\n<!-- ``` -->\n\n<!-- - Linear regression: does not model probabilities well -->\n<!--   + might produce probabilities less than zero or bigger than one -->\n<!--   + treats increase from 0.41 to 0.5 as same as 0.01 to 0.1 (bad)  -->\n\n<!-- ## Why Not Linear Regression? -->\n\n<!-- Suppose we have a response, -->\n<!-- $$Y=\\begin{cases} -->\n<!-- 1 & \\text{if stroke} \\\\ -->\n<!-- 2 & \\text{if drug overdose} \\\\ -->\n<!-- 3  & \\text{if epileptic seizure} -->\n<!-- \\end{cases}$$ -->\n\n<!-- - Linear regression suggests an ordering, and in fact implies that the differences between classes have meaning -->\n<!--   + e.g. drug overdose $-$ stroke $= 1$? ðŸ¤” -->\n\n<!-- ## Logistic Regression {.smaller} -->\n\n<!-- Consider a one-dimensional binary classification problem: -->\n\n<!-- - Transform the linear model $\\beta_0 + \\beta_1 \\ X$ so that the output is a probability -->\n<!-- - Use **logistic** or **sigmoid** function: $$g(t)=\\dfrac{e^t}{1+e^t} \\ \\ \\ \\text{for} \\ t \\in \\mathcal{R}$$ -->\n<!-- - Then: $$p(X)=P(Y=1|X)=g\\left(\\beta_0 + \\beta_1 \\ X\\right)=\\dfrac{e^{\\beta_0 + \\beta_1 \\ X}}{1+e^{\\beta_0 + \\beta_1 \\ X}}$$ -->\n\n<!-- ## Other important quantities -->\n<!-- - **Odds**: $\\dfrac{p(x)}{1-p(x)}$ -->\n<!-- - **Log-Odd**: $\\log\\left(\\dfrac{p(x)}{1-p(x)}\\right) = \\beta_0 + \\beta_1 \\ X$ -->\n<!--   + Linear function of predictors -->\n<!-- - **Inverse Logit** (sometimes called **expit**): $$\\log \\left(\\dfrac{p(X)}{1-p(X)}\\right) = \\beta_0 + \\beta_1 \\ X$$ -->\n\n<!-- ## Logistic Regression -->\n\n\n<!-- ```{r} -->\n<!-- #| echo: FALSE -->\n<!-- logregfit <- glm(default ~ balance, data = Default, family = binomial)   # fit logistic regression model -->\n<!-- ggplot(data = Default, aes(x = balance, y = default_id)) + -->\n<!--   geom_point() + -->\n<!--   geom_line(aes(y = logregfit$fitted.values), color = \"blue\") + -->\n<!--   scale_y_continuous(breaks = c(0, 0.5, 1)) -->\n<!-- ``` -->\n\n\n\n<!-- ## Fitting the model -->\n\n<!-- Fitting a logistic regression model with `default` as the response and `balance` as the predictor: -->\n\n<!-- ```{r} -->\n<!-- #| code-line-numbers: \"|2\" -->\n<!-- library(broom) #for formatting model output -->\n<!-- logregfit <- glm(default ~ balance, data = Default, family = binomial)   # fit logistic regression model -->\n<!-- tidy(logregfit)   # obtain results -->\n<!-- ``` -->\n\n<!-- ## Interpreting Coefficients -->\n\n<!-- - As $X$ increases by 1, the log-odds increase by$\\hat{\\beta}_1$ -->\n<!--   + I.e. probability of default increases but NOT linearly -->\n<!--   + Change in the probability of default due to a one-unit change in balance depends on the current balance value -->\n\n<!-- ## Interpreting Coefficients -->\n\n<!-- ```{r} -->\n<!-- #| echo: FALSE -->\n<!-- x0 <- 1000 -->\n<!-- x1 <- 1500 -->\n<!-- x2 <- 2000 -->\n<!-- y0 <- predict(logregfit, newdata = data.frame(balance = x0), type = \"response\") -->\n<!-- y1 <- predict(logregfit, newdata = data.frame(balance = x1), type = \"response\") -->\n<!-- y2 <- predict(logregfit, newdata = data.frame(balance = x2), type = \"response\") -->\n<!-- ggplot(data = Default, aes(x = balance, y = default_id)) + -->\n<!--   geom_point() + -->\n<!--   geom_vline(xintercept = x0, color = \"red\", alpha = 1, linetype = \"dotted\") + -->\n<!--   geom_vline(xintercept = x1, color = \"red\", alpha = 1, linetype = \"dotted\") + -->\n<!--   geom_vline(xintercept = x2, color = \"red\", alpha = 1, linetype = \"dotted\") + -->\n<!--   geom_hline(yintercept = y0, color = \"blue\", alpha = 0.5) + -->\n<!--   geom_hline(yintercept = y1, color = \"blue\", alpha = 0.5) + -->\n<!--   geom_hline(yintercept = y2, color = \"blue\", alpha = 0.5) + -->\n<!--  geom_segment(aes(x = 1250, y = y0, xend = 1250, yend = y1), -->\n<!--                   arrow = arrow(length = unit(0.1, \"cm\"), type = \"closed\", ends=\"both\"), color = \"blue\") + -->\n<!--    geom_segment(aes(x = 1750, y = y1, xend = 1750, yend = y2), -->\n<!--                   arrow = arrow(length = unit(0.1, \"cm\"), type = \"closed\", ends=\"both\"), color = \"blue\") + -->\n<!--   geom_line(aes(y = logregfit$fitted.values)) + -->\n<!--   scale_y_continuous(breaks = c(0, 0.5, 1)) -->\n<!-- ``` -->\n\n<!-- ## Making predictions: Theory {.smaller} -->\n\n<!-- For `balance`=\\$700, -->\n\n<!-- :::{.incremental} -->\n<!-- - $$\\hat{p}(X)=\\dfrac{e^{\\hat{\\beta}_0+\\hat{\\beta}_1 X}}{1+e^{\\hat{\\beta}_0+\\hat{\\beta}_1 X}}=\\dfrac{e^{-10.65 + (0.005499 \\times 700)}}{1+e^{-10.65 + (0.005499 \\times 700)}}=0.0011$$ -->\n<!-- -  $$\\textbf{Odds}(X) = \\dfrac{\\hat{p}(X)}{1-\\hat{p}(X)} = \\dfrac{0.0011}{1-0.0011}\\approx 0.0011$$ -->\n<!-- - $$\\textbf{Log-Odds}(X)=\\log\\left(\\dfrac{\\hat{p}(X)}{1-\\hat{p}(X)}\\right) = \\log(0.0011) = -6.80$$ -->\n<!-- ::: -->\n\n<!-- ## Making predictions in R -->\n\n<!-- ```{r} -->\n<!-- predict(logregfit, newdata = data.frame(balance = 700))   # obtain log-odds predictions -->\n<!-- predict(logregfit, newdata = data.frame(balance = 700), type = \"response\")   # obtain probability predictions -->\n<!-- ``` -->\n\n\n<!-- ## Using a threshold {.smaller} -->\n\n<!-- - Step 1: Predict **probabilities** for all observations -->\n\n<!-- ```{r} -->\n\n<!-- logreg_prob_preds <- predict(logregfit, newdata = Default, type = \"response\")   # obtain probability predictions -->\n<!-- head(logreg_prob_preds) |>    # predicted probabilities for first six observations -->\n<!--   kable() -->\n<!-- ``` -->\n\n<!-- ## Using a threshold {.smaller} -->\n\n<!-- - Step 1: Predict **probabilities** for all observations -->\n<!-- - Step 2: Set a threshold to obtain **class labels** (0.5 below) -->\n\n<!-- ```{r} -->\n\n<!-- threshold <- 0.5   # set threshold -->\n<!-- logreg_class_preds <- factor(ifelse(logreg_prob_preds > threshold, \"Yes\", \"No\"))   # obtain class predictions -->\n<!-- head(logreg_class_preds) |>    # predicted class labels for first six observations -->\n<!--   kable() -->\n<!-- ``` -->\n\n<!-- ## Assessing Performance {.smaller} -->\n\n\n<!-- ```{r} -->\n<!-- # use the following code only when all predictions are from the same class -->\n<!-- # levels(logreg_class_preds) = c(\"No\", \"Yes\") -->\n\n<!-- confusionMatrix(data = logreg_class_preds, reference = Default$default, positive = \"Yes\") -->\n<!-- ``` -->\n\n\n<!-- ## ROC Curve and AUC  {.smaller} -->\n\n<!-- ```{r} -->\n\n<!-- library(pROC)   # load library -->\n\n<!-- # create object for ROC curve -->\n\n<!-- roc_object <- roc(response = Default$default, predictor = logreg_prob_preds) -->\n<!-- ggroc(roc_object, col = \"red\")   # plot ROC curve -->\n<!-- auc(roc_object)   # obtain AUC -->\n<!-- ``` -->\n\n<!-- ## Logistic Regression vs KNN {.smaller} -->\n\n<!-- - Logistic regression $\\implies$ parametric , KNN $\\implies$ non-parametric. -->\n<!-- - Logistic regression $\\implies$ only for classification problems ($Y$ categorical), KNN $\\implies$ both regression and classification. -->\n<!-- - Logistic regression is interpretable, KNN is not. -->\n<!-- - Logistic regression allows qualitative predictors. Euclidean distance with KNN does not allow for qualitative predictors. -->\n<!-- - Prediction: KNN can be pretty good for small $p$, that is, $p \\le 4$ and large $n$. Performance of KNN deteriorates as $p$ increases - curse of dimensionality. -->\n\n<!-- ## [Decision Boundaries: Simulated observations]{.r-fit-text} -->\n\n<!-- ```{r} -->\n<!-- #| echo: FALSE -->\n\n<!-- set.seed(208) -->\n\n<!-- x1 <- runif(50, -1, 1) -->\n\n<!-- x2 <- runif(50, -1, 1) -->\n\n<!-- y <- as.factor(ifelse(x1>0, 1,2)) -->\n\n<!-- df <- data.frame(x1=x1, x2=x2, y = y) -->\n\n<!-- df$y[c(1,43, 8, 42, 44)] <- 2 -->\n\n<!-- df$y[c(24, 14)] <- 1 -->\n\n<!-- alldf <- expand.grid(x1=seq(-1, 1, 0.005), x2=seq(-1, 1, 0.005)) -->\n\n<!-- knnfit1 <- knn3(y ~ x1+x2, data = df, k = 1) -->\n\n<!-- knnfit9 <- knn3(y ~ x1+x2, data = df, k = 9) -->\n\n<!-- lgfit <- glm(y ~ x1 + x2, data = df, family = binomial) -->\n\n<!-- knn_class_preds_1 <- predict(knnfit1, newdata = alldf, type = \"class\") -->\n\n<!-- knn_class_preds_actual_1 <- predict(knnfit1, newdata = df, type = \"class\") -->\n\n<!-- knn_class_preds_9 <- predict(knnfit9, newdata = alldf, type = \"class\") -->\n\n<!-- knn_class_preds_actual_9 <- predict(knnfit9, newdata = df, type = \"class\") -->\n\n<!-- p <- predict(lgfit, newdata = df, type = \"response\") -->\n\n<!-- alldf$knn1_preds <- knn_class_preds_1 -->\n\n<!-- df$knn1_preds <- knn_class_preds_actual_1 -->\n\n<!-- alldf$knn9_preds <- knn_class_preds_9 -->\n\n<!-- df$knn9_preds <- knn_class_preds_actual_9 -->\n\n<!-- df$logreg_preds_50 <- ifelse(p >= 0.5, 2, 1) -->\n<!-- df$logreg_preds_25 <- ifelse(p >= 0.25, 2, 1) -->\n\n<!-- alldf$logreg_probs <- predict(lgfit, newdata = alldf, type = \"response\") -->\n\n<!-- alldf$logreg_preds_50 <- factor(ifelse(alldf$logreg_probs>0.5, 2, 1)) -->\n<!-- alldf$logreg_preds_25 <- factor(ifelse(alldf$logreg_probs>0.25, 2, 1)) -->\n\n<!-- g1 <- ggplot(data = alldf)+ -->\n\n<!--   geom_point(mapping = aes(x=x1, y=x2), alpha = 0.2, size = 0.3) + theme_minimal() + -->\n\n<!--   geom_point(data = df, mapping = aes(x=x1, y=x2, color = y), alpha = 5) + -->\n\n<!--   geom_point(mapping = aes(x=x1, y=x2, color = knn1_preds), alpha = 0.4, size = 0.3) + -->\n\n<!--   # stat_contour(aes(x=x1, y=x2, z=as.numeric(knn_class_preds_1)), bins=1) + -->\n\n<!--   labs(x = \"x1\", y = \"x2\", title = \"1-NN\") + -->\n\n<!--   theme(axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks.x = element_blank(), axis.ticks.y = element_blank()) -->\n\n<!-- g2 <- ggplot(data = alldf)+ -->\n\n<!--   geom_point(mapping = aes(x=x1, y=x2), alpha = 0.2, size = 0.3) + theme_minimal() + -->\n\n<!--   geom_point(data = df, mapping = aes(x=x1, y=x2, color = y), alpha = 5) + -->\n\n<!--   geom_point(mapping = aes(x=x1, y=x2, color = knn9_preds), alpha = 0.4, size = 0.3) + -->\n\n<!--   # stat_contour(aes(x=x1, y=x2, z=as.numeric(knn_class_preds_9)), bins=1) + -->\n\n<!--   labs(x = \"x1\", y = \"x2\", title = \"9-NN\") + -->\n\n<!--   theme(axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks.x = element_blank(), axis.ticks.y = element_blank()) -->\n\n<!-- # 0.3917 + (-4.3088 * x1) + (-0.6084 * x2) = 0 -->\n\n<!-- # (-0.6084 * x2) = (4.3088 * x1) - 0.3917 -->\n\n<!-- # x2 = (-7.082183 * x1) + 0.6438199 -->\n\n<!-- g3 <- ggplot(data = alldf)+ -->\n\n<!--   geom_point(mapping = aes(x=x1, y=x2), alpha = 0.2, size = 0.3) + theme_minimal() + -->\n\n<!--   geom_point(data = df, mapping = aes(x=x1, y=x2, color = y), alpha = 5) + -->\n\n<!--   geom_point(mapping = aes(x=x1, y=x2, color = logreg_preds_50), alpha = 0.4, size = 0.3) + -->\n\n<!--   labs(x = \"x1\", y = \"x2\", title = \"Logistic Regression (Thresh = 0.5)\") + -->\n\n<!--   theme(axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks.x = element_blank(), axis.ticks.y = element_blank()) -->\n\n<!-- g4 <- ggplot(data = alldf)+ -->\n\n<!--   geom_point(mapping = aes(x=x1, y=x2), alpha = 0.2, size = 0.3) + theme_minimal() + -->\n\n<!--   geom_point(data = df, mapping = aes(x=x1, y=x2, color = y), alpha = 5) + -->\n\n<!--   geom_point(mapping = aes(x=x1, y=x2, color = logreg_preds_25), alpha = 0.4, size = 0.3) + -->\n\n<!--   labs(x = \"x1\", y = \"x2\", title = \"Logistic Regression (Thresh = 0.25)\") + -->\n\n<!--   theme(axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks.x = element_blank(), axis.ticks.y = element_blank()) -->\n\n<!-- grid.arrange(g1, g2, g3, g4, ncol=2) -->\n\n<!-- ``` -->\n\n\n<!-- ## The Machine Learning Process -->\n\n<!-- For the next 2-3 class periods, we are going to discuss the overall ML process. Note that, the procedures we will discuss are not ML models, rather the models go through this process to obtain the best (optimal) predictive model. -->\n\n<!-- **Ames Housing dataset** -->\n\n<!-- ```{r,message=FALSE} -->\n\n<!-- ames <- readRDS(\"AmesHousing.rds\")   # load dataset -->\n\n<!-- ``` -->\n\n<!-- ```{r} -->\n\n<!-- # we won't use the entire dataset now (that's for later) -->\n\n<!-- # select the variables to work with for this class (04/18) -->\n\n<!-- ames <- ames %>% select(Sale_Price, Garage_Area, Year_Built)  -->\n\n<!-- ``` -->\n\n<!-- ## Exploratory Data Analysis -->\n\n<!-- **Ames Housing dataset** -->\n\n<!-- ```{r} -->\n\n<!-- summary(ames)   # summary of the variables -->\n\n<!-- ``` -->\n\n<!-- ## Exploratory Data Analysis -->\n\n<!-- **Ames Housing dataset** -->\n\n<!-- ```{r, fig.align='center'} -->\n\n<!-- library(GGally) -->\n\n<!-- ggpairs(ames)   # correlation plot -->\n\n<!-- ``` -->\n\n<!-- ## Data Splitting -->\n\n<!-- Available data split into **training** and **test** datasets. -->\n\n<!-- * **Training set:** these data are used to develop feature sets, train our algorithms, tune hyperparameters, compare models, and all of the other activities required to choose an optimal model. -->\n\n<!-- * **Test set:** having chosen a final optimal model, these data are used to obtain an unbiased estimate of the modelâ€™s performance. -->\n\n<!-- **It is critical that the test set not be used prior to selecting your final model.** Assessing results on the test set prior to final model selection biases the model selection process since the testing data will have become part of the model development process. -->\n\n<!-- ## Data Splitting -->\n\n<!-- ```{r, message = FALSE} -->\n\n<!-- # split data -->\n\n<!-- set.seed(041824)  # fix the random number generator for reproducibility -->\n\n<!-- library(caret)  # load library -->\n\n<!-- # split available data into 80% training and 20% test datasets -->\n\n<!-- train_index <- createDataPartition(y = ames$Sale_Price, p = 0.8, list = FALSE)  -->\n\n<!-- ames_train <- ames[train_index,]   # training data -->\n\n<!-- ames_test <- ames[-train_index,]   # test data -->\n\n<!-- ``` -->\n\n<!-- <!-- ## Resampling Methods -->\n\n--\\>\n\n<!-- <!-- ```{r} -->\n\n--\\> <!-- <!-- # load required packages --> --\\>\n<!-- <!-- library(tidyverse) --> --\\> <!-- <!-- library(caret) --> --\\>\n<!-- <!-- library(ISLR) --> --\\>\n\n<!-- <!-- data(\"Auto\")   # load 'Auto' daatset -->\n\n--\\>\n\n<!-- <!-- # split available data into training and test data -->\n\n--\\>\n\n<!-- <!-- set.seed(04192022)   # fix the random number generator for reproducibility -->\n\n--\\>\n\n<!-- <!-- # response: 'mpg' -->\n\n--\\>\n<!-- <!-- train_index <- createDataPartition(Auto$mpg, p = 0.8, list = FALSE) # split available data into 80% training and 20% test datasets -->\n--\\>\n\n<!-- <!-- Auto_train <- Auto[train_index,]   # training data, we will work with this to choose our final model -->\n\n--\\>\n\n<!-- <!-- Auto_test <- Auto[-train_index,]   # test data, KEEP IT ASIDE, use only after choosing final model -->\n\n--\\> <!-- <!-- ``` --> --\\>\n\n<!-- ## Resampling Methods -->\n\n<!-- * **Idea:** Repeatedly draw samples from the training data and refit a model on each sample, and evaluate its performance on the other parts. -->\n\n<!-- * **Objective:** To obtain additional information about the fitted model. -->\n\n<!-- * **Cross-Validation (CV)** is probably the most widely used resampling method. It is a general approach that can be applied to almost any statistical learning method. -->\n\n<!-- ## Cross-Validation (CV) -->\n\n<!-- Used for -->\n\n<!-- * **model selection**: select the optimum level of flexibility (tune hyperparameters) or compare different models to choose the best one -->\n\n<!-- * **model assessment**: evaluate the performance of a model (estimate the error and variability) -->\n\n<!-- We will talk about -->\n\n<!-- <!-- * Validation Set Approach -->\n\n--\\>\n\n<!-- * Leave-One-Out Cross-Validation (LOOCV) -->\n\n<!-- * $k$-Fold Cross-Validation -->\n\n<!-- <!-- ## Training Error vs Test Error -->\n\n--\\>\n\n<!-- <!-- * **Training Error**: Calculated by applying the statistical learning method to the observations used in its training. -->\n\n--\\>\n\n<!-- <!-- * **Test Error**: Average error that results from using a -->\n\n--\\>\n<!-- <!-- statistical learning method to predict the response on a new unseen observation. -->\n--\\>\n\n<!-- <!-- **Test Error Estimates** -->\n\n--\\>\n\n<!-- <!-- * From a large designated test set. -->\n\n--\\>\n\n<!-- <!-- * Making a mathematical adjustment to the training error. (Chapter 6) -->\n\n--\\>\n\n<!-- <!-- * By **holding out** a subset of the training dataset, then assessing model performance on the held out observations. -->\n\n--\\>\n\n<!-- <!-- ## Training Error vs Test Error -->\n\n--\\>\n\n<!-- <!-- ```{r , echo=FALSE,  fig.align='center', out.width = '90%'} -->\n\n--\\> <!-- <!-- knitr::include_graphics(\"EFT/SL_C5_1.PNG\") --> --\\>\n<!-- <!-- ``` --> --\\>\n\n<!-- <!-- ## Validation Set Approach -->\n\n--\\>\n\n<!-- <!-- * Randomly divide the available set of observations into: a **training set** and a **validation/hold-out set**. -->\n\n--\\>\n\n<!-- <!-- * Model fit on the training set. Fitted model is used to predict the responses for the observations in the -->\n\n--\\> <!-- <!-- validation set. --> --\\>\n\n<!-- <!-- ```{r , echo=FALSE,  fig.align='center', out.width = '90%'} -->\n\n--\\> <!-- <!-- knitr::include_graphics(\"EFT/5.1.PNG\") --> --\\>\n<!-- <!-- ``` --> --\\>\n\n<!-- <!-- ## Validation Set Approach -->\n\n--\\>\n\n<!-- <!-- **Auto dataset** -->\n\n--\\>\n\n<!-- <!-- ```{r, echo=FALSE, fig.align='center'} -->\n\n--\\> <!-- <!-- data(\"Auto\") --> --\\>\n<!-- <!-- plot(Auto$horsepower,Auto$mpg,ylab=\"mpg\",xlab=\"horsepower\") -->\n--\\> <!-- <!-- ``` --> --\\>\n\n<!-- <!-- Randomly split the 392 observations into two sets, a training set containing 196 data points, and a validation set containing the remaining 196 observations. -->\n\n--\\>\n\n<!-- <!-- ## Validation Set Approach -->\n\n--\\>\n\n<!-- <!-- ```{r , echo=FALSE,  fig.align='center', out.width = '90%'} -->\n\n--\\> <!-- <!-- knitr::include_graphics(\"EFT/5.2.PNG\") --> --\\>\n<!-- <!-- ``` --> --\\>\n\n<!-- <!-- Potential drawbacks: -->\n\n--\\>\n\n<!-- <!-- * The validation set estimate of the test error can be highly variable. -->\n\n--\\>\n\n<!-- <!-- * Only a subset of the observations (those that are in the training set) are used to fit the model. This suggests that the validation set error may tend to overestimate the test error for the model fit on the entire data set. -->\n\n--\\>\n\n<!-- <!-- * Yields different results due to randomness in training and validation datasets. -->\n\n--\\>\n\n<!-- ## Leave-One-Out Cross-Validation (LOOCV) -->\n\n<!-- <!-- * Closely related to the validation set approach. Attempts to address its drawbacks. -->\n\n--\\>\n\n<!-- ```{r , echo=FALSE,  fig.align='center', out.width = '70%'} -->\n\n<!-- knitr::include_graphics(\"EFT/5.3.PNG\") -->\n\n<!-- ``` -->\n\n<!-- ## <span style=\"color:blue\">Your Turn!!!</span>  -->\n\n<!-- Suppose you implement LOOCV on a dataset with $n=100$ observations. -->\n\n<!-- 1. What is the size (number of observations) of each training set? -->\n\n<!-- 2. What is the size of each validation set? -->\n\n<!-- 3. How many steps/iterations are required to complete the overall LOOCV process? -->\n\n<!-- <!-- ```{r , echo=FALSE,  fig.align='center', out.width = '30%'} -->\n\n--\\> <!-- <!-- knitr::include_graphics(\"EFT/e5.1.PNG\") --> --\\>\n<!-- <!-- ``` --> --\\>\n\n<!-- <!-- ## Leave-One-Out Cross-Validation (LOOCV) -->\n\n--\\>\n\n<!-- <!-- ```{r, fig.align='center', fig.height=6, fig.width=8} -->\n\n--\\>\n<!-- <!-- # comparing 4 polynomial (regression) models with LOOCV (response: 'mpg', predictor: 'horsepower') -->\n--\\>\n\n<!-- <!-- ggplot(data = Auto, aes(x = horsepower, y = mpg)) +   # quick visual check -->\n\n--\\> <!-- <!--   geom_point() --> --\\> <!-- <!-- ``` --> --\\>\n\n<!-- <!-- ## Leave-One-Out Cross-Validation (LOOCV): Implementation -->\n\n--\\>\n\n<!-- <!-- ```{r,message=FALSE} -->\n\n--\\> <!-- <!-- ames <- readRDS(\"AmesHousing.rds\")   # load dataset -->\n--\\> <!-- <!-- ``` --> --\\>\n\n<!-- <!-- Consider `Sale_Price` as the response variable. Split the data into training and test data. -->\n\n--\\>\n\n<!-- <!-- ```{r, message = FALSE} -->\n\n--\\>\n<!-- <!-- set.seed(012423)  # fix the random number generator for reproducibility -->\n--\\>\n\n<!-- <!-- library(caret)  # load library -->\n\n--\\>\n\n<!-- <!-- train_index <- createDataPartition(y = ames$Sale_Price, p = 0.8, list = FALSE) # split available data into 80% training and 20% test datasets -->\n\n--\\>\n\n<!-- <!-- ames_train <- ames[train_index,]   # training data, use this dataset to build model -->\n\n--\\>\n\n<!-- <!-- ames_test <- ames[-train_index,]   # test data, use this dataset to evaluate model's performance -->\n\n--\\> <!-- <!-- ``` --> --\\>\n\n<!-- <!-- ## Leave-One-Out Cross-Validation (LOOCV): Implementation -->\n\n--\\>\n\n<!-- <!-- Define CV specifications. -->\n\n--\\>\n\n<!-- <!-- ```{r} -->\n\n--\\>\n<!-- <!-- cv_specs_loocv <- trainControl(method = \"LOOCV\")   # specify CV method -->\n--\\> <!-- <!-- ``` --> --\\>\n\n<!-- <!-- We will compare the following three linear regression models: -->\n\n--\\>\n\n<!-- <!-- * with `Garage_Area` as the only predictor; -->\n\n--\\>\n\n<!-- <!-- * with `Overall_Qual` as the only predictor; -->\n\n--\\>\n\n<!-- <!-- * with `Garage_Area`, `Year_Built`, and `Overall_Qual` as predictors. -->\n\n--\\>\n\n<!-- <!-- ## Leave-One-Out Cross-Validation (LOOCV): Implementation -->\n\n--\\>\n\n<!-- <!-- Implement LOOCV with the first model. -->\n\n--\\>\n\n<!-- <!-- ```{r} -->\n\n--\\>\n<!-- <!-- m1 <- train(form = Sale_Price ~ Garage_Area,    # specify model -->\n--\\> <!-- <!--             data = ames_train,   # specify dataset -->\n--\\>\n<!-- <!--             method = \"lm\",       # specify type of model -->\n--\\>\n<!-- <!--             trControl = cv_specs_loocv, # CV specifications -->\n--\\>\n<!-- <!--             metric = \"RMSE\")   # metric to evaluate model -->\n--\\>\n\n<!-- <!-- m1   # summary of LOOCV -->\n\n--\\> <!-- <!-- ``` --> --\\>\n\n<!-- <!-- ## Leave-One-Out Cross-Validation (LOOCV): Implementation -->\n\n--\\>\n\n<!-- <!-- Implement LOOCV with the second model. -->\n\n--\\>\n\n<!-- <!-- ```{r} -->\n\n--\\> <!-- <!-- m2 <- train(form = Sale_Price ~ Overall_Qual,   --> --\\>\n<!-- <!--             data = ames_train,           --> --\\>\n<!-- <!--             method = \"lm\",               --> --\\>\n<!-- <!--             trControl = cv_specs_loocv,        --> --\\>\n<!-- <!--             metric = \"RMSE\")            --> --\\>\n\n<!-- <!-- m2 -->\n\n--\\> <!-- <!-- ``` --> --\\>\n\n<!-- <!-- ## Leave-One-Out Cross-Validation (LOOCV): Implementation -->\n\n--\\>\n\n<!-- <!-- Implement LOOCV with the third model. -->\n\n--\\>\n\n<!-- <!-- ```{r} -->\n\n--\\>\n<!-- <!-- m3 <- train(form = Sale_Price ~ Garage_Area + Year_Built + Overall_Qual,   -->\n--\\> <!-- <!--             data = ames_train, --> --\\>\n<!-- <!--             method = \"lm\", --> --\\>\n<!-- <!--             trControl = cv_specs_loocv, --> --\\>\n<!-- <!--             metric = \"RMSE\") --> --\\>\n\n<!-- <!-- m3 -->\n\n--\\> <!-- <!-- ``` --> --\\>\n\n<!-- <!-- ## Leave-One-Out Cross-Validation (LOOCV): Results -->\n\n--\\>\n\n<!-- <!-- Compare LOOCV results for different models. -->\n\n--\\>\n\n<!-- <!-- ```{r, fig.align='center', fig.height=6, fig.width=8} -->\n\n--\\> <!-- <!-- # create data frame to plot results --> --\\>\n\n<!-- <!-- df <- data.frame(model_number = 1:3, RMSE = c(m1$results$RMSE,   -->\n\n--\\>\n<!-- <!--                                              m2$results$RMSE, -->\n--\\>\n<!-- <!--                                              m3$results$RMSE)) -->\n--\\>\n\n<!-- <!-- # plot results from LOOCV -->\n\n--\\>\n\n<!-- <!-- ggplot(data = df, aes(x = model_number, y =  RMSE)) +    -->\n\n--\\> <!-- <!--   geom_point() + geom_line() --> --\\>\n\n<!-- <!-- ``` -->\n\n--\\>\n\n<!-- ## Leave-One-Out Cross-Validation (LOOCV) -->\n\n<!-- **Advantages** -->\n\n<!-- * LOOCV will give approximately unbiased estimates of the test error, since each training set contains $nâˆ’1$ observations, which is almost as many as the number of observations in the full training dataset. -->\n\n<!-- <!-- * Has far less bias than the validation set approach, since the training sets (used to fit the model) are almost as big as the original dataset. -->\n\n--\\>\n\n<!-- * Performing LOOCV multiple times will always yield the same results. -->\n\n<!-- **Disadvantages** -->\n\n<!-- * Can be potentially expensive to implement, specially for large $n$. -->\n\n<!-- * LOOCV error estimate can have high variance.  -->\n\n<!-- ## $k$-Fold Cross-Validation -->\n\n<!-- * Randomly divide the training data into $k$ groups or **folds** (approximately equal size). -->\n\n<!-- * Consider one of these folds as the validation set. Fit the model on the remaining $k-1$ folds combined, and obtain predictions for the $k^{th}$ fold. Repeat for all $k$ folds. -->\n\n<!-- ```{r , echo=FALSE,  fig.align='center', out.width = '70%'} -->\n\n<!-- knitr::include_graphics(\"EFT/5.5.PNG\") -->\n\n<!-- ``` -->\n\n<!-- ## <span style=\"color:blue\">Your Turn!!!</span>  -->\n\n<!-- Suppose you implement 10-fold CV on a dataset with $n=100$ observations. -->\n\n<!-- 1. What is the size (number of observations) of each training set? -->\n\n<!-- 2. What is the size of each validation set? -->\n\n<!-- 3. How many steps/iterations are required to complete the overall CV process? -->\n\n<!-- ## $k$-Fold Cross-Validation: Implementation -->\n\n<!-- **Ames Housing dataset** -->\n\n<!-- <!-- ```{r,message=FALSE} -->\n\n--\\> <!-- <!-- ames <- readRDS(\"AmesHousing.rds\")   # load dataset -->\n--\\> <!-- <!-- ``` --> --\\>\n\n<!-- Consider `Sale_Price` as the response variable. We will compare the following three linear regression models: -->\n\n<!-- * with `Garage_Area` as the only predictor; -->\n\n<!-- * with `Year_Built` as the only predictor; -->\n\n<!-- * with `Garage_Area` and `Year_Built` as predictors. -->\n\n<!-- <!-- ## $k$-Fold Cross-Validation: Implementation -->\n\n--\\>\n\n<!-- <!-- **Ames Housing dataset** -->\n\n--\\>\n\n<!-- <!-- Split the data into training and test data. -->\n\n--\\>\n\n<!-- <!-- ```{r, message = FALSE} -->\n\n--\\>\n<!-- <!-- set.seed(042023)  # fix the random number generator for reproducibility -->\n--\\>\n\n<!-- <!-- library(caret)  # load library -->\n\n--\\>\n\n<!-- <!-- train_index <- createDataPartition(y = ames$Sale_Price, p = 0.8, list = FALSE) # split available data into 80% training and 20% test datasets -->\n\n--\\>\n\n<!-- <!-- ames_train <- ames[train_index,]   # training data -->\n\n--\\>\n\n<!-- <!-- ames_test <- ames[-train_index,]   # test data -->\n\n--\\> <!-- <!-- ``` --> --\\>\n\n<!-- ## $k$-Fold Cross-Validation: Implementation -->\n\n<!-- **Ames Housing dataset** -->\n\n<!-- Define CV specifications. -->\n\n<!-- ```{r} -->\n\n<!-- cv_specs <- trainControl(method = \"repeatedcv\",   # CV method -->\n\n<!--                          number = 10,    # number of folds -->\n\n<!--                          repeats = 5)     # number of repeats -->\n\n<!-- ``` -->\n\n<!-- ## $k$-Fold Cross-Validation: Implementation -->\n\n<!-- **Ames Housing dataset** - Implement 10-fold CV with the first model. -->\n\n<!-- ```{r} -->\n\n<!-- set.seed(041824) -->\n\n<!-- m1 <- train(form = Sale_Price ~ Garage_Area,    # specify model -->\n\n<!--             data = ames_train,   # specify dataset -->\n\n<!--             method = \"lm\",       # specify type of model -->\n\n<!--             trControl = cv_specs, # CV specifications -->\n\n<!--             metric = \"RMSE\")   # metric to evaluate model -->\n\n<!-- m1   # summary of CV -->\n\n<!-- m1$results  # estimate and variability of metrics -->\n\n<!-- ``` -->\n\n<!-- ## $k$-Fold Cross-Validation: Implementation -->\n\n<!-- **Ames Housing dataset** - Implement 10-fold CV with the second model. -->\n\n<!-- ```{r} -->\n\n<!-- set.seed(041824) -->\n\n<!-- m2 <- train(form = Sale_Price ~ Year_Built,   -->\n\n<!--             data = ames_train,           -->\n\n<!--             method = \"lm\",               -->\n\n<!--             trControl = cv_specs,        -->\n\n<!--             metric = \"RMSE\")            -->\n\n<!-- m2 -->\n\n<!-- m2$results -->\n\n<!-- ``` -->\n\n<!-- ## $k$-Fold Cross-Validation: Implementation -->\n\n<!-- **Ames Housing dataset** - Implement 10-fold CV with the third model. -->\n\n<!-- ```{r} -->\n\n<!-- set.seed(041824) -->\n\n<!-- m3 <- train(form = Sale_Price ~ Garage_Area + Year_Built,   -->\n\n<!--             data = ames_train, -->\n\n<!--             method = \"lm\", -->\n\n<!--             trControl = cv_specs, -->\n\n<!--             metric = \"RMSE\") -->\n\n<!-- m3 -->\n\n<!-- m3$results -->\n\n<!-- ``` -->\n\n<!-- ## $k$-Fold Cross-Validation: Results  -->\n\n<!-- **Ames Housing dataset** -->\n\n<!-- Compare CV results for different models. -->\n\n<!-- ```{r, fig.align='center', fig.height=6, fig.width=8} -->\n\n<!-- # create data frame to plot results -->\n\n<!-- df <- data.frame(model_number = 1:3, RMSE = c(m1$results$RMSE,   -->\n\n<!--                                              m2$results$RMSE, -->\n\n<!--                                              m3$results$RMSE)) -->\n\n<!-- # plot results from CV -->\n\n<!-- ggplot(data = df, aes(x = model_number, y =  RMSE)) +    -->\n\n<!--   geom_point() + geom_line() -->\n\n<!-- ``` -->\n\n<!-- <!-- ## $k$-Fold Cross-Validation -->\n\n--\\>\n\n<!-- <!-- ```{r} -->\n\n--\\>\n<!-- <!-- # comparing 4 polynomial (regression) models with k-fold CV (response: 'mpg', predictor: 'horsepower') -->\n--\\>\n\n<!-- <!-- set.seed(041920221)   # fix the random number generator for reproducibility -->\n\n--\\>\n\n<!-- <!-- # CV specifications (method, number of folds k, number of repetitions) -->\n\n--\\>\n<!-- <!-- cv_specs <- trainControl(method = \"repeatedcv\", number = 10, repeats = 5)  -->\n--\\>\n\n<!-- <!-- m1 <- train(mpg ~ horsepower,   # model: y = beta_0 + beta_1 x -->\n\n--\\> <!-- <!--             data = Auto_train, --> --\\>\n<!-- <!--             method = \"lm\", --> --\\>\n<!-- <!--             trControl = cv_specs, --> --\\>\n<!-- <!--             metric = \"RMSE\") --> --\\>\n\n<!-- <!-- m1   # summary of model with LOOCV -->\n\n--\\> <!-- <!-- ``` --> --\\>\n\n<!-- <!-- ## $k$-Fold Cross-Validation -->\n\n--\\>\n\n<!-- <!-- ```{r} -->\n\n--\\>\n<!-- <!-- m2 <- train(mpg ~ poly(horsepower,2),   # model: y = beta_0 + beta_1 x + beta_2 x^2 -->\n--\\> <!-- <!--             data = Auto_train, --> --\\>\n<!-- <!--             method = \"lm\", --> --\\>\n<!-- <!--             trControl = cv_specs, --> --\\>\n<!-- <!--             metric = \"RMSE\") --> --\\>\n\n<!-- <!-- m3 <- train(mpg ~ poly(horsepower, 3),   # model: y = beta_0 + beta_1 x + beta_2 x^2 + beta_3 x^3 -->\n\n--\\> <!-- <!--             data = Auto_train, --> --\\>\n<!-- <!--             method = \"lm\", --> --\\>\n<!-- <!--             trControl = cv_specs, --> --\\>\n<!-- <!--             metric = \"RMSE\") --> --\\>\n\n<!-- <!-- m4 <- train(mpg ~ poly(horsepower, 4),   # model: y = beta_0 + beta_1 x + beta_2 x^2 + beta_3 x^3 + beta_4 x^4 -->\n\n--\\> <!-- <!--             data = Auto_train, --> --\\>\n<!-- <!--             method = \"lm\", --> --\\>\n<!-- <!--             trControl = cv_specs, --> --\\>\n<!-- <!--             metric = \"RMSE\") --> --\\> <!-- <!-- ``` --> --\\>\n\n<!-- <!-- ## $k$-Fold Cross-Validation -->\n\n--\\>\n\n<!-- <!-- ```{r, fig.align='center', fig.height=6, fig.width=8} -->\n\n--\\>\n<!-- <!-- df <- data.frame(poly_degree = 1:4, RMSE = c(m1$results$RMSE,   # create data frame to plot results -->\n--\\>\n<!-- <!--                                              m2$results$RMSE, -->\n--\\>\n<!-- <!--                                              m3$results$RMSE, -->\n--\\>\n<!-- <!--                                              m4$results$RMSE)) -->\n--\\>\n\n<!-- <!-- ggplot(data = df, aes(x = poly_degree, y =  RMSE)) +    # plot results from LOOCV -->\n\n--\\> <!-- <!--   geom_point() + geom_line() --> --\\> <!-- <!-- ``` -->\n--\\>\n\n<!-- ## Final Model and Prediction Error Estimate -->\n\n<!-- **Ames Housing dataset** -->\n\n<!-- ```{r} -->\n\n<!-- # after choosing final (optimal) model, refit final model using ALL training data -->\n\n<!-- m3$finalModel     -->\n\n<!-- ``` -->\n\n<!-- ```{r} -->\n\n<!-- # obtain estimate of prediction error from test data -->\n\n<!-- final_model_preds <- predict(m3, newdata = ames_test)   # obtain predictions on test data -->\n\n<!-- pred_error_est <- sqrt(mean((ames_test$Sale_Price - final_model_preds)^2))    # calculate RMSE (estimate of prediction error) from test data -->\n\n<!-- pred_error_est   # test set RMSE -->\n\n<!-- ``` -->\n\n<!-- <!-- ## Variable Importance -->\n\n--\\>\n\n<!-- <!-- **Ames Housing dataset** -->\n\n--\\>\n\n<!-- <!-- ```{r, fig.align='center', fig.height=6, fig.width=8} -->\n\n--\\> <!-- <!-- # variable importance --> --\\>\n\n<!-- <!-- library(vip) -->\n\n--\\>\n\n<!-- <!-- vip(object = m3,         # CV object  -->\n\n--\\>\n<!-- <!--     num_features = 20,   # maximum number of predictors to show importance for -->\n--\\>\n<!-- <!--     method = \"model\")            # model-specific VI scores -->\n--\\> <!-- <!-- ``` --> --\\>\n\n<!-- <!-- ## $k$-Fold Cross-Validation -->\n\n--\\>\n\n<!-- <!-- Let $n_i$ be the number of observations in  $i^{th}, (i=1,\\ldots,k)$ fold. If $n$ is a multiple of $k$, then $n_i=\\frac{n}{k}$. -->\n\n--\\>\n\n<!-- <!-- ```{r , echo=FALSE,  fig.align='center', out.width = '40%'} -->\n\n--\\> <!-- <!-- knitr::include_graphics(\"EFT/e5.3.PNG\") --> --\\>\n<!-- <!-- ``` --> --\\>\n\n<!-- <!-- If the folds are not of equal size, -->\n\n--\\>\n\n<!-- <!-- $$CV_{(k)}=\\displaystyle \\sum_{i=1}^k \\dfrac{n_i}{n} MSE_{i}$$ -->\n\n--\\>\n\n<!-- <!-- A good choice is $k=5$ or $10$. LOOCV is a special case of $k$-fold CV. -->\n\n--\\>\n\n<!-- <!-- ## LOOCV and $k$-Fold CV -->\n\n--\\>\n\n<!-- <!-- **Auto dataset** -->\n\n--\\>\n\n<!-- <!-- ```{r , echo=FALSE,  fig.align='center', out.width = '100%'} -->\n\n--\\> <!-- <!-- knitr::include_graphics(\"EFT/5.4.PNG\") --> --\\>\n<!-- <!-- ``` --> --\\>\n\n<!-- <!-- ## Performance of LOOCV and $k$-Fold CV -->\n\n--\\>\n\n<!-- <!-- <!-- **Figures 2.9-2.11 in Chapter 2** -->\n\n--\\>\n\n<!-- <!-- ```{r , echo=FALSE,  fig.align='center', out.width = '100%'} -->\n\n--\\> <!-- <!-- knitr::include_graphics(\"EFT/5.6.PNG\") --> --\\>\n<!-- <!-- ``` --> --\\>\n\n<!-- ## Bias-Variance Trade-off for LOOCV and $k$-fold CV -->\n\n<!-- * LOOCV has very less bias. Using $k=5$ or $10$ yields more bias than LOOCV. -->\n\n<!-- <!-- , but less than validation set approach. -->\n\n--\\>\n\n<!-- * For LOOCV, the error estimates for each fold are highly (positively) correlated. $k$-fold CV error estimates are somewhat less correlated. LOOCV error estimate has higher variance than $k$-fold CV error estimate. -->\n\n<!-- * Typically, $k=5$ or $10$ is chosen. -->\n\n<!-- <!-- ## CV to Tune Hyperparameter -->\n\n--\\>\n\n<!-- <!-- **Auto dataset** -->\n\n--\\>\n\n<!-- <!-- ```{r,message=FALSE} -->\n\n--\\> <!-- <!-- library(ISLR2)  # load library --> --\\>\n\n<!-- <!-- data(\"Auto\")   # load dataset -->\n\n--\\> <!-- <!-- ``` --> --\\>\n\n<!-- <!-- We will consider `mpg` as the response and `horsepower` as the predictor.  -->\n\n--\\>\n\n<!-- <!-- ```{r} -->\n\n--\\> <!-- <!-- # select the variables to work with --> --\\>\n\n<!-- <!-- Auto <- Auto %>% select(mpg, horsepower) -->\n\n--\\> <!-- <!-- ``` --> --\\>\n\n<!-- <!-- ## CV to Tune Hyperparameter -->\n\n--\\>\n\n<!-- <!-- **Objective**: Find the optimum choice of $K$ in the KNN approach with 5-fold CV repeated 5 times. We will use the following steps. -->\n\n--\\>\n\n<!-- <!-- * Perform EDA (Exploratory Data Analysis) -->\n\n--\\>\n\n<!-- <!-- * Split the data into training and test data (80-20 split). -->\n\n--\\>\n\n<!-- <!-- * Specify CV specifications using **trainControl**. -->\n\n--\\>\n\n<!-- <!-- * Create an object **k_grid** using the following code. -->\n\n--\\>\n\n<!-- <!-- ```{r} -->\n\n--\\>\n<!-- <!-- k_grid <- expand.grid(k = seq(1, 100, by = 1))  # creates a grid of k values to be used (1 to 100 in this case) -->\n--\\> <!-- <!-- ``` --> --\\>\n\n<!-- <!-- * Use the **train** function to run CV. Use **method = \"knn\"**, **tuneGrid = k_grid**, and **metric = \"RMSE\"**. -->\n\n--\\>\n\n<!-- <!-- * Obtain the results and plot them. What is the optimum $k$ chosen? -->\n\n--\\>\n\n<!-- <!-- * Create the final model using the optimum $k$ and estimate its prediction error from the test data. -->\n\n--\\>\n\n<!-- <!-- ## CV to Tune Hyperparameter: EDA {.smaller} -->\n\n--\\>\n\n<!-- <!-- **Auto dataset** -->\n\n--\\>\n\n<!-- <!-- ```{r} -->\n\n--\\> <!-- <!-- summary(Auto)   # summary of the variables --> --\\>\n<!-- <!-- ``` --> --\\>\n\n<!-- <!-- ```{r, fig.align='center', fig.height=4, fig.width=4} -->\n\n--\\> <!-- <!-- library(GGally) --> --\\>\n<!-- <!-- ggpairs(Auto)    # correlation plot --> --\\> <!-- <!-- ``` -->\n--\\>\n\n<!-- <!-- ## CV to Tune Hyperparameter: Split Data -->\n\n--\\>\n\n<!-- <!-- **Auto dataset** -->\n\n--\\>\n\n<!-- <!-- ```{r, message = FALSE} -->\n\n--\\>\n<!-- <!-- set.seed(041824)  # fix the random number generator for reproducibility -->\n--\\>\n\n<!-- <!-- library(caret)  # load library -->\n\n--\\>\n\n<!-- <!-- train_index <- createDataPartition(y = Auto$mpg, p = 0.8, list = FALSE) # split available data into 80% training and 20% test datasets -->\n\n--\\>\n\n<!-- <!-- Auto_train <- Auto[train_index,]   # training data -->\n\n--\\>\n\n<!-- <!-- Auto_test <- Auto[-train_index,]   # test data -->\n\n--\\> <!-- <!-- ``` --> --\\>\n\n<!-- <!-- ## CV to Tune Hyperparameter: Perform CV -->\n\n--\\>\n\n<!-- <!-- **Auto dataset** -->\n\n--\\>\n\n<!-- <!-- ```{r} -->\n\n--\\>\n<!-- <!-- set.seed(041824)  # fix the random number generator for reproducibility -->\n--\\>\n\n<!-- <!-- # CV specifications -->\n\n--\\>\n<!-- <!-- cv_specs <- trainControl(method = \"repeatedcv\", number = 5, repeats = 5) -->\n--\\>\n\n<!-- <!-- # specify grid of 'k' values to search over -->\n\n--\\> <!-- <!-- k_grid <- expand.grid(k = seq(1, 100, by = 1)) --> --\\>\n\n<!-- <!-- # train the KNN model using CV  to find optimal 'k' -->\n\n--\\> <!-- <!-- knn_cv <- train(form = mpg ~ horsepower, --> --\\>\n<!-- <!--                  data = Auto_train, --> --\\>\n<!-- <!--                  method = \"knn\", --> --\\>\n<!-- <!--                  trControl = cv_specs, --> --\\>\n<!-- <!--                  tuneGrid = k_grid, --> --\\>\n<!-- <!--                  metric = \"RMSE\") --> --\\> <!-- <!-- ``` -->\n--\\>\n\n<!-- <!-- ## CV to Tune Hyperparameter: Compare CV Results -->\n\n--\\>\n\n<!-- <!-- **Auto dataset** -->\n\n--\\>\n\n<!-- <!-- ```{r, eval=FALSE} -->\n\n--\\> <!-- <!-- knn_cv   # CV results, shows RMSE for all K --> --\\>\n<!-- <!-- ``` --> --\\>\n\n<!-- <!-- ```{r, fig.align='center'} -->\n\n--\\> <!-- <!-- ggplot(knn_cv)   # plot CV results for different 'k' -->\n--\\> <!-- <!-- ``` --> --\\>\n\n<!-- <!-- ## CV to Tune Hyperparameter: Final Model -->\n\n--\\>\n\n<!-- <!-- **Auto dataset** -->\n\n--\\>\n\n<!-- <!-- ```{r} -->\n\n--\\> <!-- <!-- # final model with optimal 'k' chosen from CV --> --\\>\n\n<!-- <!-- knn_cv$bestTune     # optimal value of K -->\n\n--\\>\n\n<!-- <!-- knn_cv$finalModel   # final model -->\n\n--\\> <!-- <!-- ``` --> --\\>\n\n<!-- <!-- ```{r} -->\n\n--\\> <!-- <!-- # obtain predictions on test data --> --\\>\n<!-- <!-- final_model_preds <- predict(knn_cv, newdata = Auto_test) -->\n--\\>\n\n<!-- <!-- # estimate test set prediction error -->\n\n--\\>\n<!-- <!-- sqrt(mean((Auto_test$mpg - final_model_preds)^2))    # test set RMSE -->\n--\\> <!-- <!-- ``` --> --\\>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}